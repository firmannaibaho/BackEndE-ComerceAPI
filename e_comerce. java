import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ECommerceAPI {
    public static void main(String[] args) throws IOException {
        // Membuat instance HttpServer pada port 8059
        HttpServer server = HttpServer.create(new InetSocketAddress("127.0.0.1", 8059), 0);

        // Menambahkan context untuk setiap endpoint API
        server.createContext("/users", new UsersHandler());
        server.createContext("/users/{id}/products", new UserProductsHandler());
        server.createContext("/users/{id}/orders", new UserOrdersHandler());
        server.createContext("/users/{id}/reviews", new UserReviewsHandler());
        server.createContext("/orders/{id}", new OrderHandler());
        server.createContext("/products", new ProductsHandler());
        server.createContext("/products/{id}", new ProductHandler());

        // Menjalankan server
        server.start();
    }

    // Handler untuk endpoint /users
    static class UsersHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                // Implementasi logika untuk GET /users
                List<User> userList = getUsersFromDatabase();
                String response = userList.toString();
                sendResponse(exchange, 200, response);
            } else if ("POST".equals(exchange.getRequestMethod())) {
                // Implementasi logika untuk POST /users
                // Baca data JSON dari body request, validasi, dan tambahkan data users ke database
                String requestBody = getRequestBody(exchange);
                // Lakukan validasi requestBody
                // Simpan data pengguna ke dalam database
                sendResponse(exchange, 201, "User created successfully");
            } else {
                // Metode HTTP tidak didukung
                sendErrorResponse(exchange, 405, "Method Not Allowed");
            }
        }
    }

    // Handler untuk endpoint /users/{id}/products
    static class UserProductsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // Implementasi logika untuk GET /users/{id}/products, POST /users/{id}/products, dan lainnya
            if ("GET".equals(exchange.getRequestMethod())) {
                String userId = getUserIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk mengambil daftar produk dari pengguna dengan userId tertentu
                List<Product> productList = getUserProductsFromDatabase(userId);
                String response = productList.toString();
                sendResponse(exchange, 200, response);
            } else if ("POST".equals(exchange.getRequestMethod())) {
                String userId = getUserIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk menambahkan produk baru ke pengguna dengan userId tertentu
                // Baca data JSON dari body request, validasi, dan tambahkan produk ke database pengguna
                String requestBody = getRequestBody(exchange);
                // Lakukan validasi requestBody
                // Tambahkan produk baru ke pengguna dengan userId tertentu di database
                sendResponse(exchange, 201, "Product added to user successfully");
            } else {
                // Metode HTTP tidak didukung
                sendErrorResponse(exchange, 405, "Method NotAllowed");
            }
        }
    }
    // Handler untuk endpoint /users/{id}/orders
    static class UserOrdersHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // Implementasi logika untuk GET /users/{id}/orders, POST /users/{id}/orders, dan lainnya
            if ("GET".equals(exchange.getRequestMethod())) {
                String userId = getUserIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk mengambil daftar pesanan dari pengguna dengan userId tertentu
                List<Order> orderList = getUserOrdersFromDatabase(userId);
                String response = orderList.toString();
                sendResponse(exchange, 200, response);
            } else if ("POST".equals(exchange.getRequestMethod())) {
                String userId = getUserIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk membuat pesanan baru untuk pengguna dengan userId tertentu
                // Baca data JSON dari body request, validasi, dan tambahkan pesanan ke database pengguna
                String requestBody = getRequestBody(exchange);
                // Lakukan validasi requestBody
                // Tambahkan pesanan baru untuk pengguna dengan userId tertentu di database
                sendResponse(exchange, 201, "Order created successfully");
            } else {
                // Metode HTTP tidak didukung
                sendErrorResponse(exchange, 405, "Method Not Allowed");
            }
        }
    }

    // Handler untuk endpoint /users/{id}/reviews
    static class UserReviewsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // Implementasi logika untuk GET /users/{id}/reviews, POST /users/{id}/reviews, dan lainnya
            if ("GET".equals(exchange.getRequestMethod())) {
                String userId = getUserIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk mengambil daftar ulasan dari pengguna dengan userId tertentu
                List<Review> reviewList = getUserReviewsFromDatabase(userId);
                String response = reviewList.toString();
                sendResponse(exchange, 200, response);
            } else if ("POST".equals(exchange.getRequestMethod())) {
                String userId = getUserIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk menambahkan ulasan baru untuk pengguna dengan userId tertentu
                // Baca data JSON dari body request, validasi, dan tambahkan ulasan ke database pengguna
                String requestBody = getRequestBody(exchange);
                // Lakukan validasi requestBody
                // Tambahkan ulasan baru untuk pengguna dengan userId tertentu di database
                sendResponse(exchange, 201, "Review added to user successfully");
            } else {
                // Metode HTTP tidak didukung
                sendErrorResponse(exchange, 405, "Method Not Allowed");
            }
        }
    }

    // Handler untuk endpoint /orders/{id}
    static class OrderHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                String orderId = getResourceIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk GET /orders/{id}
                // Ambil id dari path parameter, lakukan validasi, dan ambil informasi pesanan dari database
                Order order = getOrderFromDatabase(orderId);
                if (order != null) {
                    String response = order.toString();
                    sendResponse(exchange, 200, response);
                } else {
                    sendErrorResponse(exchange, 404, "Order not found");
                }
            }
            else if ("PUT".equals(exchange.getRequestMethod())) {
                String orderId = getResourceIdFromPath(exchange.getRequestURI().getPath());
// Implementasi logika untuk PUT /orders/{id}
// Ambil id dari path parameter, baca data JSON dari body request, validasi, dan update informasi pesanan di database
                String requestBody = getRequestBody(exchange);
// Lakukan validasi requestBody
// Update informasi pesanan dengan orderId tertentu di database
                sendResponse(exchange, 200, "Order updated successfully");
            } else if ("DELETE".equals(exchange.getRequestMethod())) {
                String orderId = getResourceIdFromPath(exchange.getRequestURI().getPath());
// Implementasi logika untuk DELETE /orders/{id}
// Ambil id dari path parameter, lakukan validasi, dan hapus pesanan dari database
                boolean success = deleteOrderFromDatabase(orderId);
                if (success) {
                    sendResponse(exchange, 200, "Order deleted successfully");
                } else {
                    sendErrorResponse(exchange, 404, "Order not found");
                }
            } else {
// Metode HTTP tidak didukung
                sendErrorResponse(exchange, 405, "Method Not Allowed");
            }
        }
    }
    // Handler untuk endpoint /products
    static class ProductsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                // Implementasi logika untuk GET /products
                List<Product> productList = getProductsFromDatabase();
                String response = productList.toString();
                sendResponse(exchange, 200, response);
            } else if ("POST".equals(exchange.getRequestMethod())) {
                // Implementasi logika untuk POST /products
                // Baca data JSON dari body request, validasi, dan tambahkan data produk ke database
                String requestBody = getRequestBody(exchange);
                // Lakukan validasi requestBody
                // Simpan data produk ke dalam database
                sendResponse(exchange, 201, "Product created successfully");
            } else {
                // Metode HTTP tidak didukung
                sendErrorResponse(exchange, 405, "Method Not Allowed");
            }
        }
    }

    // Handler untuk endpoint /products/{id}
    static class ProductHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                String productId = getResourceIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk GET /products/{id}
                // Ambil id dari path parameter, lakukan validasi, dan ambil informasi produk dari database
                Product product = getProductFromDatabase(productId);
                if (product != null) {
                    String response = product.toString();
                    sendResponse(exchange, 200, response);
                } else {
                    sendErrorResponse(exchange, 404, "Product not found");
                }
            } else if ("PUT".equals(exchange.getRequestMethod())) {
                String productId = getResourceIdFromPath(exchange.getRequestURI().getPath());
                // Implementasi logika untuk PUT /products/{id}
                // Ambil id dari path parameter, baca data JSON dari body request, validasi, dan update informasi produk di database
                String requestBody = getRequestBody(exchange);
                // Lakukan validasi requestBody
                // Update informasi produk dengan productId tertentu di database
                sendResponse(exchange, 200, "Product updated successfully");
            } else if ("DELETE".equals(exchange.getRequestMethod())) {
                String productId = getResourceIdFromPath(exchange.getRequestURI().getPath());
                //Implementasi logika untuk DELETE /products/{id}
// Ambil id dari path parameter, lakukan validasi, dan hapus produk dari database
                boolean success = deleteProductFromDatabase(productId);
                if (success) {
                    sendResponse(exchange, 200, "Product deleted successfully");
                } else {
                    sendErrorResponse(exchange, 404, "Product not found");
                }
            } else {
// Metode HTTP tidak didukung
                sendErrorResponse(exchange, 405, "Method Not Allowed");
            }
        }
    }
    // Fungsi untuk mendapatkan daftar pengguna dari database (dummy implementation)
    static List<User> getUsersFromDatabase() {
        // Implementasikan logika pengambilan data pengguna dari database
        // Dummy implementation
        List<User> userList = new ArrayList<>();
        userList.add(new User("1", "John Doe"));
        userList.add(new User("2", "Jane Smith"));
        return userList;
    }

    // Fungsi untuk mendapatkan daftar produk dari pengguna dengan userId tertentu (dummy implementation)
    static List<Product> getUserProductsFromDatabase(String userId) {
        // Implementasikan logika pengambilan daftar produk dari database untuk pengguna dengan userId tertentu
        // Dummy implementation
        List<Product> productList = new ArrayList<>();
        productList.add(new Product("1", "Product A"));
        productList.add(new Product("2", "Product B"));
        return productList;
    }

    // Fungsi untuk mendapatkan daftar pesanan dari pengguna dengan userId tertentu (dummy implementation)
    static List<Order> getUserOrdersFromDatabase(String userId) {
        // Implementasikan logika pengambilan daftar pesanan dari database untuk pengguna dengan userId tertentu
        // Dummy implementation
        List<Order> orderList = new ArrayList<>();
        orderList.add(new Order("1", "Order A"));
        orderList.add(new Order("2", "Order B"));
        return orderList;
    }

    // Fungsi untuk mendapatkan daftar ulasan dari pengguna dengan userId tertentu (dummy implementation)
    static List<Review> getUserReviewsFromDatabase(String userId) {
        // Implementasikan logika pengambilan daftar ulasan dari database untuk pengguna dengan userId tertentu
        // Dummy implementation
        List<Review> reviewList = new ArrayList<>();
        reviewList.add(new Review("1", "Review A"));
        reviewList.add(new Review("2", "Review B"));
        return reviewList;
    }

    // Fungsi untuk mendapatkan informasi pesanan dari database berdasarkan orderId tertentu (dummy implementation)
    static Order getOrderFromDatabase(String orderId) {
        // Implementasikan logika pengambilan informasi pesanan dari database berdasarkan orderId tertentu
        // Dummy implementation
        if (orderId.equals("1")) {
            return new Order("1", "Order A");
        } else {
            return null;
        }
    }

    // Fungsi untuk menghapus pesanan dari database berdasarkan orderId tertentu (dummy implementation)
    static boolean deleteOrderFromDatabase(String orderId) {
        // Implementasikan logika penghapusan pesanan dari database berdasarkan orderId tertentu
        // Dummy implementation
        if (orderId.equals("1")) {
            return true;
        } else {
            return false;
        }
    }

    // Fungsi untuk mendapatkan daftar produk dari database (dummy implementation)
    static List<Product> getProductsFromDatabase() {
        // Implementasikan logika pengambilan data produk dari database
        // Dummy implementation
        List<Product> productList = new ArrayList<>();
        productList.add(new Product("1", "Product A"));
        productList.add(new Product("2", "Product B"));
        return productList;
    }
    // Fungsi untuk mendapatkan informasi produk dari database berdasarkan productId tertentu (dummy implementation)
    static Product getProductFromDatabase(String productId) {
        // Implementasikan logika pengambilan informasi produk dari database berdasarkan productId tertentu
        // Dummy implementation
        if (productId.equals("1")) {
            return new Product("1", "Product A");
        } else {
            return null;
        }
    }

    // Fungsi untuk menghapus produk dari database berdasarkan productId tertentu (dummy implementation)
    static boolean deleteProductFromDatabase(String productId) {
        // Implementasikan logika penghapusan produk dari database berdasarkan productId tertentu
        // Dummy implementation
        if (productId.equals("1")) {
            return true;
        } else {
            return false;
        }
    }

    // Fungsi untuk mendapatkan userId dari path URI (dummy implementation)
    static String getUserIdFromPath(String path) {
        // Implementasikan logika untuk mendapatkan userId dari path URI
        // Dummy implementation
        String[] pathSegments = path.split("/");
        if (pathSegments.length > 2) {
            return pathSegments[2];
        } else {
            return null;
        }
    }

    // Fungsi untuk mendapatkan resourceId (orderId atau productId) dari path URI (dummy implementation)
    static String getResourceIdFromPath(String path) {
        // Implementasikan logika untuk mendapatkan resourceId (orderId atau productId) dari path URI
        // Dummy implementation
        String[] pathSegments = path.split("/");
        if (pathSegments.length > 2) {
            return pathSegments[2];
        } else {
            return null;
        }
    }

    // Fungsi untuk mendapatkan data JSON dari body request (dummy implementation)
    static String getRequestBody(HttpExchange exchange) {
        // Implementasikan logika untuk mendapatkan data JSON dari body request
        // Dummy implementation
        return "{}";
    }

    // Fungsi untuk mengirim response HTTP dengan status code dan body tertentu (dummy implementation)
    static void sendResponse(HttpExchange exchange, int statusCode, String body) throws IOException {
        // Implementasikan logika untuk mengirim response HTTP dengan status code dan body tertentu
        // Dummy implementation
        exchange.sendResponseHeaders(statusCode, body.length());
        OutputStream outputStream = exchange.getResponseBody();
        outputStream.write(body.getBytes());
        outputStream.close();
    }

    // Fungsi untuk mengirim response error HTTP dengan status code dan pesan tertentu (dummy implementation)
    static void sendErrorResponse(HttpExchange exchange, int statusCode, String message) throws IOException {
        // Implementasikan logika untuk mengirim response error HTTP dengan status code dan pesan tertentu
        // Dummy implementation
        exchange.sendResponseHeaders(statusCode, message.length());
        OutputStream outputStream = exchange.getResponseBody();
        outputStream.write(message.getBytes());
        outputStream.close();
    }
}

